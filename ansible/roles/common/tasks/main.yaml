---
- name: Configure Floating IP
  hosts: workers
  become: yes  # This ensures that Ansible runs the commands with elevated privileges (e.g., sudo)
  tasks:
    - name: Fetch the dynamic IP address of the worker node
      set_fact:
        worker_node_ip: "{{ ansible_default_ipv4.address }}"
      delegate_to: localhost  # Run this task on the Ansible control node

    - name: Create Directory
      file:
        path: /etc/network/interfaces.d
        state: directory
        mode: '0755'

    - name: Create the /etc/network/interfaces.d/60-floating-ip.cfg file
      copy:
        dest: "/etc/network/interfaces.d/60-floating-ip.cfg"
        content: |
          auto eth0:1
          iface eth0:1 inet static
              address {{ worker_node_ip }}
              netmask 32

    - name: Restart networking service
      service:
        name: systemd-networkd.service
        state: restarted

- hosts: all
  tasks:
    - name: Install kube-dependencies task
      ansible.builtin.import_tasks:
        file: kube-dependencies.yaml

- hosts: masters
  become: yes
  tasks:
    - name: Install apt-transport-https
      package:
        name: apt-transport-https
        state: present

    - name: Add Kubernetes apt repository key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install kubectl
      package:
        name: kubectl
        state: present

# Initial Control-Plane Init
- hosts: master-node
  become: yes
  tasks:
    - name: Setup initial Kubernetes Control-Plane node
      ansible.builtin.import_tasks:
        file: master.yaml

# Additional Control-Plane nodes joining the cluster
- hosts: masters:!master-node
  become: yes
  tasks:
    - name: get join command for control-plane nodes
      shell: echo $(kubeadm token create --ttl 20m --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | grep -vw -e certificate -e Namespace)
      register: join_command_raw_masters
      delegate_to: root@MASTER_NODE_IP

    - name: set join command as a host variable for masters
      set_fact:
        join_command_masters: "{{ join_command_raw_masters.stdout_lines[0] }}"
      delegate_to: localhost

    - name: TCP port 6443 on master is reachable from worker
      wait_for: "host=MASTER_NODE_IP port=6443 timeout=1"

    - name: join cluster
      shell: "{{ join_command_masters }}"

# Worker nodes joining the Cluster
- hosts: workers
  become: yes
  tasks:
    - name: get join command for workers
      shell: kubeadm token create --ttl 10m --print-join-command 
      register: join_command_raw_workers
      delegate_to: root@MASTER_NODE_IP

    - name: set join command as a host variable for workers
      set_fact:
        join_command_workers: "{{ join_command_raw_workers.stdout_lines[0] }}"
      delegate_to: localhost

    - name: TCP port 6443 on master is reachable from worker
      wait_for: "host=MASTER_NODE_IP port=6443 timeout=1"

    - name: join cluster
      shell: "{{ join_command_workers }}"

# Make the worker-nodes ready for scheduling
- name: Taint worker nodes to allow scheduling
  hosts: localhost
  ignore_errors: yes 
  become: yes
  tasks:
    - name: Get the names of all worker nodes
      shell: "kubectl get nodes --selector='!node-role.kubernetes.io/control-plane' -o=jsonpath='{.items[*].metadata.name}'"
      register: worker_nodes
      delegate_to: root@MASTER_NODE_IP

    - name: Taint worker nodes
      shell: "kubectl taint nodes {{ item }} node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule-"
      with_items: "{{ worker_nodes.stdout.split() }}"
      delegate_to: root@MASTER_NODE_IP

    
